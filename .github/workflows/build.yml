name: Deploy usercenter-frontend

# 触发条件：当代码推送到 master 分支时触发工作流
on:
  push:
    branches:
      - master

jobs:
  deploy:
    # 使用最新的 Ubuntu 作为运行环境
    runs-on: ubuntu-latest

    steps:
      # 步骤1：检出代码
      # 这是一个 GitHub 官方的动作，用于检出仓库代码到 runner 环境
      - name: Checkout code
        uses: actions/checkout@v2

      # 步骤2：缓存 Node.js 模块
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 步骤3：设置 Node.js 环境
      # 使用 actions/setup-node@v2 设置 Node.js 版本为 20.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20.12.0'

      # 步骤4：添加淘宝镜像源并安装依赖项
      # 运行 npm install 安装项目的所有依赖项
      - name: Add Taobao registry and install dependencies
        run: |
          npm i

      # 步骤5：构建项目
      # 运行 npm run build 构建项目，将生成的文件放入 dist 文件夹
      - name: Build project
        run: |
          export NODE_OPTIONS=--openssl-legacy-provider
          npm run build -- --mode production --profile --json > build-stats.json

      # 步骤6：设置 SSH Key
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key

      # 步骤7：通过 SSH 确保目标路径存在
      # 通过 SSH 连接到服务器并创建必要的文件夹路径
      # 如果目录已经存在也不会报错
      - name: Ensure target directories exist
        run: |
          ssh -o StrictHostKeyChecking=no -i deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          mkdir -p /docker-data/nginx/html/usercenter-frontend
          mkdir -p /docker-data/nginx/cert/usercenter-frontend-cert
          mkdir -p /docker-data/nginx/conf.d
          EOF

      # 步骤8：通过 SSH 复制 dist 文件夹内容到服务器
      - name: Copy dist files via SSH
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "dist/*"
          strip_components: 1 # 确保不会在目标路径中创建额外的目录层级。
          target: "/docker-data/nginx/html/usercenter-frontend/"

      # 步骤9：通过 SSH 复制 SSL 证书到服务器
      - name: Copy SSL certs via SSH
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "nginx/config.d/usercenter-frontend-cert/*"
          strip_components: 3
          target: "/docker-data/nginx/cert/usercenter-frontend-cert/"

      # 步骤10：通过 SSH 复制 Nginx 配置文件到服务器
      - name: Copy Nginx config via SSH
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "nginx/config.d/usercenter-frontend.conf"
          strip_components: 2
          target: "/docker-data/nginx/conf.d/"

      # 步骤11：重启 Nginx 容器
      - name: Restart Nginx container
        run: |
          ssh -o StrictHostKeyChecking=no -i deploy_key ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          docker restart nginx
          EOF
